{"components":{"main":{"script":"\nfunction copy_parts(parts) {\n  \n  const copies = {};\n  \n  Object.keys(parts).forEach(key => {\n    print(\"copying\", key)\n    copies[key] = parts[key].copy()\n  });\n  \n  return copies;\n}\n\n\n\nconst limb = components.limb({}, 'limb')\n\n// limb.parts.tibia.copy().move(200,200,200)\n// limb.parts.femur.copy().move(200,200,200)\n\nconst limb_1 = limb.left.parts\nconst limb_2 = copy_parts(limb.left.parts)\nconst limb_3 = copy_parts(limb.left.parts)\nconst limb_4 = limb.right.parts\n\n\nObject.values(limb_4).forEach(p => p.move(500, 100, 700))\n\nlimb.left.assemble(limb_1)\nlimb.left.assemble(limb_2)\nlimb.left.assemble(limb_3)\n\nlimb.right.assemble(limb_4)\n\n// const mirrored = build.BooleanParam(true);\n// const limb_4 = components.limb({ mirrored }, 'limb_4')\n\n//limb_4.tibia.move(100, 100, 100)\n\n\n\nconst LEG_MOUNT_R = build.RealParam(15)\n\nconst body = components.body({\n  leg_mount_R: LEG_MOUNT_R\n}, 'body')\n\nbody.part.turnX(45)\nbody.part.move(100, 100, 100)\nbody.part.turnY(45)\n\n\nconst att1 = limb_1.femur_joint.port(\"top_shaft_mount\").attach(body.part.port('leg_socket_1'))\natt1.turn(70)\n\n\nconst att2 = limb_2.femur_joint.port(\"top_shaft_mount\").attach(body.part.port('leg_socket_2'))\natt2.turn(100)\n\n\nconst att3 = limb_3.femur_joint.port(\"top_shaft_mount\").attach(body.part.port('leg_socket_3'))\natt3.turn(130)\n\n// const att4 = limb_4.femur_joint.port(\"top_shaft_mount\").attach(body.part.port('leg_socket_4'))\n// att4.turn(10)\n\nconst att4 = limb.test.port(\"top_shaft_mount\").attach(body.part.port('leg_socket_4'))\natt4.turn(10)\n\n\nbody.part.move(100, 100, 100)\n\n\n\n\n\n\n\n\n\n\n\n\n","systemOfUnits":"mm"},"sketch":{"script":"","systemOfUnits":"mm"},"body":{"script":"const LEG_MOUNT_R = build.RealParam(15, 'leg_mount_R')\n\nconst FRONT_LEG_LENGTH = 160\nconst SIDE_LEG_LENGTH = 70\n\nconst FRONT_LEG_R = 40\nconst SIDE_R = FRONT_LEG_R\nconst WIDTH_R = 70\nconst HEIGHT_R = 90\nconst INNER_R = 50\nconst THICKNESS = 20\n\nconst datum = build.Datum({\n  origin: {\n    x:0, y:0, z:0\n  }\n}, 'reference');\n\n\nconst outline = build.Plane({\n  datum\n}, 'outline')\n\ndatum.consume()\n\n\nconst holes = path(outline);\n\nconst p = path(outline);\n\nlet left_arc = p.arc({radius: SIDE_R, tangentA: 90, tangentB: 0, flip: true})\np.segment({length: SIDE_LEG_LENGTH})\np.arc({radius: HEIGHT_R, turn: 120})\np.segment({length: FRONT_LEG_LENGTH})\np.arc({radius: FRONT_LEG_R, turn: 180, flip: true}) \np.circle({radius: LEG_MOUNT_R, center: p.last.center})\nconst mount_1_pt = p.last.center;\n\np.segment({length: FRONT_LEG_LENGTH})\nconst MID_X = p.arc({radius: WIDTH_R, angle: 0}).center.vector2D.x \np.mirror({ angle: 90, flip: true })\n\nconst mount_6_pt = mount_1_pt.transform(p.transformation);\n\nholes.circle({x: p.last.A.vector2D.x, y: 0, radius: LEG_MOUNT_R})\nconst mount_5_pt = holes.last.center\n\nlet right_arc = p.last;\n\np.mirror({ angle: 0, flip: false})\n\nconst mount_4_pt = mount_6_pt.transform(p.transformation);\nconst mount_3_pt = mount_1_pt.transform(p.transformation);\n\np.move({x: MID_X, y: 80})\np.circle({radius: INNER_R})\np.move({x: MID_X, y: -80})\np.circle({radius: INNER_R})\np.circle({center: left_arc.center, radius: LEG_MOUNT_R})\nconst mount_2_pt = p.last.center\n\np.merge(holes)\n\n\nconst part = build.Part({\n  shapes: [\n    p.face().extrude({length: THICKNESS})\n    \n  ]\n}, 'part')\n\n\nconst m1d = mount_1_pt.datum()\nconst m2d = mount_2_pt.datum()\nconst m3d = mount_3_pt.datum()\nconst m4d = mount_4_pt.datum()\npart.add_port('leg_socket_1', m1d)\npart.add_port('leg_socket_2', m2d)\npart.add_port('leg_socket_3', m3d)\npart.add_port('leg_socket_4', m4d)\n\nm1d.consume()\nm2d.consume()\nm3d.consume()\n\n\n","systemOfUnits":"mm"},"servo_mount":{"script":"\nconst ANG = 30\n\nconst datum = build.Datum({\n  origin: {\n    x:-50, y:100, z:100\n  }\n}, 'reference')\n\nconst plane = build.Plane({datum})\ndatum.consume()\n\nconst p = path(plane)\n\n//p.arc({tangentA: 180-ANG, tangentB: ANG, radius: 15})\n//p.segment({length: 30})\n//p.arc({tangentB: 170-ANG, radius: 5})\n//p.segment({length: 20})\n\nconst c1 = p.circle({radius: 15})\np.move({x: 50, y: 50})\nconst c2 = p.circle({radius: 10})\nconst l1 = p.common_external_tangent(c1,c2)\nconst l2 = p.common_external_tangent(c2,c1)\nc1.aux()\nc2.aux()\np.arc({radius: 15, tangentB: l1.tangentA })\np.arc({\n  radius: 10, \n  A: l1.B, \n  tangentA: l1.tangentB,\n  tangentB: l2.tangentA\n})\nconst base_solid = p.face().extrude({length: 5})\nconst top_face = base_solid.face('F:top/Plane-0/face.extrude-1')\n\n\nconst tp = path(top_face.surface)\ntp.circle({radius: 10})\ntp.circle({radius: 5})\nconst top_solid = tp.face().extrude({length: 5})\n\nbase_solid.union(top_solid, 'mount_arm')\n\n\n//\n\n//p.segment({length: 15})\n\n\n\n\n","systemOfUnits":"mm"},"leg":{"script":"//leg\n\nconst datum = build.Datum({\n}, 'reference')\n\nconst plane = build.Plane({datum})\ndatum.consume()\n\nconst p = path(plane)\nconst R = 50\np.bezier({\n\n  tangentA: 135,\n  curvatureA: 30,\n\n  angle: 90,\n  length: 300,\n  tangentB: 40,\n  curvatureB: 160\n\n  \n\n})\np.arc({radius: 15, angle: 0, flip: true })\np.segment({length: 55})\n\np.arc({radius: 10, turn: 180, flip: true })\np.segment({length: 50})\nconst port_datum = p.location.datum()\np.arc({radius: 2, turn: 90})\np.segment({length: 100})\np.arc({radius: 2, turn: 90})\np.segment({length: 55})\np.arc({radius: 10, turn: 180, flip: true})\np.segment({length: 45})\n\n\n\n\np.bezier({\n  \n  \n  //tangentA: 220,\n  curvatureA: 75,\n  \n  x: 6,\n  y: 0,\n\n  tangentB: -90,\n  curvatureB: 10\n  \n})\n\n\np.bezier({\n  \n  \n  tangentA: 220,\n  curvatureA: 3,\n  \n  x: 0,\n  y: 0,\n\n  tangentB: 135,\n  curvatureB: 3\n  \n})\n\n\nconst THICK = 10\nconst solid = p.face().extrude({length: THICK})\nconst part = build.Part({\n  shapes: [solid]\n}, 'shape')\n\npart.add_port('servo_corner_right', port_datum)\nport_datum.consume()\n\nconst port_datum_left = port_datum.copy()\nport_datum_left.move(0, 0, THICK)\nport_datum_left.turnX(180)\nport_datum_left.turnZ(-90)\npart.add_port('servo_corner_left', port_datum_left)\nport_datum_left.consume()\n\n\n\n\n\n","systemOfUnits":"mm"},"femur":{"script":"\n\nconst datum = build.Datum({\n}, 'reference')\n\nconst plane = build.Plane({datum})\ndatum.consume()\n\nconst L = 150\nconst R = 30\n\nconst p = path(plane)\nconst c1 = p.circle({radius: R}).aux()\np.move({x: L, y: 0})\nconst c2 = p.circle({radius: R}).aux()\nconst line = p.common_external_tangent(c1, c2)\np.arc({turn: 180+45, radius: R})\np.bezier({\n  x: L/2, y: 0,\n  tangentB: 180\n})\n\np.move(line.A)\np.arc({angle: -45, radius: R, flip: true})\np.bezier({\n  x: L/2, y: 0,\n  tangentB: 0\n})\n\np.move(c1.center)\np.circle({radius: 10})\n\np.move(c2.center)\np.circle({radius: 10})\n\nconst right_mount = p.last.center.datum()\n\nconst part = build.Part({\n  shapes: [\n    \n    p.face().extrude({length: 10})\n  ]\n}, 'shape')\n\npart.add_port('left', datum)\npart.add_port('right', right_mount)\n\nright_mount.consume()\n","systemOfUnits":"mm"},"servo":{"script":"\nconst datum = build.Datum({\n}, 'reference')\n//datum.consume()\n\nconst plane = build.Plane({datum})\ndatum.consume()\n\nlet p = path(plane)\n\nconst W = 100\nconst H1 = 100\nconst T = 10\nconst L = 20\nconst H2 = 30\nconst THICK = 50\n\np.segment({length: W})\np.segment({length: H1, turn: 90})\np.segment({length: L, turn: -90})\np.segment({length: T, turn: 90})\np.segment({length: L, turn: 90})\n\nconst side_mount_datum_right = p.location.datum()\n\np.segment({length: H2, turn: -90})\np.segment({length: W, turn: 90}, 'top')\np.segment({length: H2, turn: 90})\np.segment({length: L, turn: -90})\np.segment({length: T, turn: 90})\np.segment({length: L, turn: 90})\np.segment({length: H1, turn: -90})\n\n\nlet base = p.face().extrude({length: THICK}, 'base')\n\nconst top_plane = base.face('F:sweep[E[top]]/base').surface\nconst R = THICK/2\nconst SH = 25\n\np = path(top_plane)\np.move({x: R, y: -R})\np.circle({radius: THICK/2})\nconst boss1 = p.face().extrude({length: SH}, 'boss1')\n\np = path(top_plane)\np.move({x: R*2, y: -R})\np.circle({radius: THICK/4})\n\nconst boss2 = p.face().extrude({length: SH}, 'boss2')\n\nbase = base.union(boss1.union(boss2))\n\n\nconst gear_plane = base.face('F:usd(F:bool(F:top/boss1)/boss1.union-1|F:bool(F:top/boss1|'\n  +'F:top/boss2)/boss1.union-1|F:bool(F:top/boss2)/boss1.union-1)').surface\n\np = path(gear_plane)\np.move({x: R, y: -R})\np.circle({radius: 10})\n\nconst BOSS_HEIGHT = 10\n\nconst shaft_mount_datum = p.last.center.datum()\n\n\nconst boss3 = p.face().extrude({length: BOSS_HEIGHT}, 'boss3')\n//base.union(boss3, 'body')\n\n\nbase = build.Part({\n  shapes: [\n    base.union(boss3, 'main')\n  ]\n}, 'body')\n\n\nconst side_mount_datum_left = side_mount_datum_right.copy()\n\nside_mount_datum_left.move(0,0,THICK)\nside_mount_datum_left.turnX(-90)\n\nside_mount_datum_right.turnX(-90)\nside_mount_datum_right.turnZ(180)\n\n\n\nbase.add_port('side_mount_datum_right', side_mount_datum_right)\nbase.add_port('side_mount_datum_left', side_mount_datum_left)\nbase.add_port('shaft_mount', shaft_mount_datum)\n\nside_mount_datum_right.consume()\nside_mount_datum_left.consume()\nshaft_mount_datum.consume()\n\n\n\n","systemOfUnits":"mm"},"servo_joint":{"script":"const servo = components.servo({}, 'servo')\n\n\nconst s1 = servo.body;\n\n\nconst dat = build.Datum({})\ndat.move(0, 0, 50)\ndat.turnZ(90)\ndat.move(40, -100, 0)\n\n\nconst s2 = s1.copy();\ns2.place(dat)\ndat.consume()\n\nconst comp = build.Part({\n  shapes: [s1, s2]\n}, \"shape\")\n\n\nconst top_shaft_mount_datum = s1.port('shaft_mount').datum()\nconst side_shaft_mount_datum = s2.port('shaft_mount').datum()\n\ncomp.add_port('top_shaft_mount', top_shaft_mount_datum)\ncomp.add_port('side_shaft_mount', side_shaft_mount_datum)\n\n\ntop_shaft_mount_datum.consume()\nside_shaft_mount_datum.consume()\n","systemOfUnits":"mm"},"limb":{"script":"\n\nconst mirrored = build.BooleanParam(false, \"mirrored\")\n\nlet tibia = components.leg({}, 'tibia').shape\nlet tibia_servo = components.servo({}, 'tibia_servo').body\nlet femur = components.femur({}, 'femur').shape\nlet femur_joint = components.servo_joint({}, 'joint').shape\n\n\nfunction assemble_left({\n  tibia, tibia_servo, femur, femur_joint\n}) {\n\n  const attchs = {}\n  tibia.port('servo_corner_left').attach(tibia_servo.port('side_mount_datum_left'))\n  \n  attchs.knee = femur.port('right').attach(tibia_servo.port('shaft_mount'))\n  attchs.knee.turn(90)\n  \n  attchs.hip = femur_joint.port('side_shaft_mount').attach(femur.port('left'))\n  attchs.hip.turn(-90)\n\n  return attchs\n}\n\nfunction assemble_right({\n  tibia, tibia_servo, femur, femur_joint\n}) {\n\n  const attchs = {}\n  // tibia.port('servo_corner_left').attach(tibia_servo.port('side_mount_datum_left'))\n  \n  // attchs.knee = femur.port('left').attach(tibia_servo.port('shaft_mount'))\n  // attchs.knee.turn(90)\n  \n  // tibia_servo.consume()\n  // femur_joint.move(300,300,300)\n  // femur_joint.port('side_shaft_mount').datum()\n  attchs.hip = femur_joint.port('side_shaft_mount').attach(femur.port('right'))\n  // attchs.hip.turn(-90)\n\n  return attchs\n}\n\nconst mir_plane = build.Datum({})\n// mir_plane.consume()\nconst mirrored_join = femur_joint.mirror(mir_plane)\n\nfemur_joint.copy().port('side_shaft_mount').datum()\nconst test = femur_joint.mirror(mir_plane)\ntest.port('side_shaft_mount').datum()\n\nexpose({\n  left: {\n    parts: {\n      tibia, tibia_servo, femur, femur_joint  \n    },\n    assemble: assemble_left\n  },\n  right: {\n    parts: {\n      tibia: tibia.copy(), \n      tibia_servo: tibia_servo.copy(), \n      femur: femur.copy(), \n      femur_joint: mirrored_join\n    },\n    assemble: assemble_right\n\n  },\n  test\n})\n\n","systemOfUnits":"mm"}},"modules":{"XX":{"components":{"main":{"systemOfUnits":"mm","script":""},"asdasdasd":{"script":"","systemOfUnits":"mm"}},"modules":{"asdasdasdasd":{"components":{"main":{"systemOfUnits":"mm","script":""}},"modules":{},"library":{},"camera":{},"selection":["main"],"target":["main"],"defaultSystemOfUnits":"mm"}},"library":{},"camera":{},"selection":["main"],"target":["main"],"defaultSystemOfUnits":"mm","remote":{"repositoryId":"local","path":"__XX"}}},"library":{},"camera":{},"selection":[],"target":["main"],"defaultSystemOfUnits":"mm","remote":{"repositoryId":"central","path":"hexapod.2.0"}}